工厂方法（FactoryMethod）模式的定义：
定义一个创建产品对象的工厂接口，将产品对象的实际创建工作推迟到具体子工厂类当中。
这满足创建型模式中所要求的“创建与使用相分离”的特点。

我们把被创建的对象称为“产品”，把创建产品的对象称为“工厂”。
如果要创建的产品不多，只要一个工厂类就可以完成，这种模式叫“简单工厂模式”，它不属于 GoF 的 23 种经典设计模式，它的缺点是增加新产品时会违背“开闭原则”。

本节介绍的“工厂方法模式”是对简单工厂模式的进一步抽象化，其好处是可以使系统在不修改原来代码的情况下引进新的产品，即满足开闭原则。

主要优点有：
    **用户只需要知道具体工厂的名称就可得到所要的产品，无须知道产品的具体创建过程；
    **在系统增加新的产品时只需要添加具体产品类和对应的具体工厂类，无须对原工厂进行任何修改，满足开闭原则；
其缺点是：每增加一个产品就要增加一个具体产品类和一个对应的具体工厂类，这增加了系统的复杂度。


工厂方法模式由抽象工厂、具体工厂、抽象产品和具体产品等4个要素构成。

工厂方法模式的主要角色如下。
    **抽象工厂（Abstract Factory）：提供了创建产品的接口，调用者通过它访问具体工厂的工厂方法 newProduct() 来创建产品。
    **具体工厂（ConcreteFactory）：主要是实现抽象工厂中的抽象方法，完成具体产品的创建。
    **抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能。
    **具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间一一对应。

理解：工厂方法，可以使我们在业务层不关注“产品”的具体实现，也能减少创建“产品”的改动。
同时进一步抽象工厂，可以让工厂的指定更自由，但是工厂设计得越多，系统越复杂，冗余也会越来越多，甚至因为技术更新，导致旧有工厂完全不使用。


【例1】：AnimalFarmTest.java
用工厂方法模式设计畜牧场。
分析：有很多种类的畜牧场，如养马场用于养马，养牛场用于养牛，所以该实例用工厂方法模式比较适合。
对养马场和养牛场等具体工厂类，只要定义一个生成动物的方法 newAnimal() 即可。
由于要显示马类和牛类等具体产品类的图像，所以它们的构造函数中用到了 JPanel、JLabd 和 ImageIcon 等组件，并定义一个 show() 方法来显示它们。
客户端程序通过对象生成器类 ReadXML2 读取 XML 配置文件中的数据来决定养马还是养牛。



工厂方法模式通常适用于以下场景。
    **客户只知道创建产品的工厂名，而不知道具体的产品名。如 TCL 电视工厂、海信电视工厂等。
    **创建对象的任务由多个具体子工厂中的某一个完成，而抽象工厂只提供创建产品的接口。
    **客户不关心创建产品的细节，只关心产品的品牌。