在现实生活中，某些类具有两个或多个维度的变化，如图形既可按形状分，又可按颜色分。
如何设计类似于 Photoshop 这样的软件，能画不同形状和不同颜色的图形呢？如果用继承方式，m 种形状和 n 种颜色的图形就有 m×n 种，不但对应的子类很多，而且扩展困难。

当然，这样的例子还有很多，如不同颜色和字体的文字、不同品牌和功率的汽车、不同性别和职业的男女、支持不同平台和不同文件格式的媒体播放器等。
如果用桥接模式就能很好地解决这些问题。

桥接（Bridge）模式的定义如下：将抽象与实现分离，使它们可以独立变化。
它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。

桥接（Bridge）模式的优点是：
    **由于抽象与实现分离，所以扩展能力强；
    **其实现细节对客户透明。

缺点是：由于聚合关系建立在抽象层，要求开发者针对抽象化进行设计与编程，这增加了系统的理解与设计难度。

可以将抽象化部分与实现化部分分开，取消二者的继承关系，改用组合关系。

桥接（Bridge）模式包含以下主要角色。
    **抽象化（Abstraction）角色：定义抽象类，并包含一个对实现化对象的引用。
    **扩展抽象化（Refined    Abstraction）角色：是抽象化角色的子类，实现父类中的业务方法，并通过组合关系调用实现化角色中的业务方法。
    **实现化（Implementor）角色：定义实现化角色的接口，供扩展抽象化角色调用。
    **具体实现化（Concrete Implementor）角色：给出实现化角色接口的具体实现。

【例1】BagManage.java
用桥接（Bridge）模式模拟女士皮包的选购。
分析：女士皮包有很多种，可以按用途分、按皮质分、按品牌分、按颜色分、按大小分等，存在多个维度的变化，所以采用桥接模式来实现女士皮包的选购比较合适。

本实例按用途分可选钱包（Wallet）和挎包（HandBag），按颜色分可选黄色（Yellow）和红色（Red）。可以按两个维度定义为颜色类和包类。

颜色类（Color）是一个维度，定义为实现化角色，它有两个具体实现化角色：黄色和红色，通过 getColor() 方法可以选择颜色；
包类（Bag）是另一个维度，定义为抽象化角色，它有两个扩展抽象化角色：挎包和钱包，它包含了颜色类对象，通过 getName() 方法可以选择相关颜色的挎包和钱包。

客户类通过 ReadXML 类从 XML 配置文件中获取包信息，并把选到的产品通过窗体显示出现.

桥接模式通常适用于以下场景。
    **当一个类存在两个独立变化的维度，且这两个维度都需要进行扩展时。
    **当一个系统不希望使用继承或因为多层次继承导致系统类的个数急剧增加时。
    **当一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性时。


在软件开发中，有时桥接（Bridge）模式可与适配器模式联合使用。当桥接（Bridge）模式的实现化角色的接口与现有类的接口不一致时，可以在二者中间定义一个适配器将二者连接起来。



理解：
    **桥接模式，是一个利用乘法的设计模式。
    分析角度：从解决多层继承问题来看。
    多层继承，最直观的一点坏处是类的数量多，类数量 = m * n ，m代表现有父类，n代表新增维度。
    如：电脑   可分为  台式机、笔记本、平板电脑  ， 3种类型。
        此时加入品牌这个维度，使用继承方式扩展的话，则每种类型 都要被 各个品牌 继承，类数量= 3* n个品牌。
    使用继承，实际上是一个加法的思路，每多一个品牌，就意味着3个父类被多继承一次。
    要提高效率，就得使用乘法的思路，桥接就是乘法的思路，而且相对继承，维护难度降低了。
    一个维度，对桥接来说，就是一个乘法因子，而且还是未知数。
    由此可知，桥接的变化是多样的，若使用多层继承，可就难以应付各种变化。

    **维度，可理解为对象拥有的复杂属性。
如：一辆车，拥有车牌、车辆颜色等，以宏观角度看，车，可以直接声明字符串类型的车牌属性和车辆颜色属性。
但在现实中，车辆颜色可以有更复杂的体系，如，使用了某种稀有喷漆，虽然也是红色，但其会更艳丽，也会反光等，给人一种更明亮的红色。
在这种时候，车辆颜色就可以单独成为一个对象类，其有更具体的属性，如：标准色号、反光度、材料、耐久度等。

    **时刻牢记7个原则，根据开闭原则和依赖倒置原则，需要考虑扩展性。对维度进行抽象化，维度的变更就不会到影响整体的结构，代码修改量也可以减少。
理论上，使用桥接模式，维度都应该是一个对象，那么抽象化就是可能的。
在本文例1中，虽然皮包声明的Color很简单，甚至可以直接使用字符串声明。但正如对车辆颜色的分析，可以有更复杂的体系。
使用抽象化后，一个维度的变更就不会影响整体的结构。把简单的车辆颜色，变更为复杂体系时，所进行的修改就减少。


