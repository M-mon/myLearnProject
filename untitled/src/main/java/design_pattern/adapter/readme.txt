在现实生活中，经常出现两个对象因接口不兼容而不能在一起工作的实例，这时需要第三者进行适配。
例如，讲中文的人同讲英文的人对话时需要一个翻译;
用直流电的笔记本电脑接交流电源时需要一个电源适配器;
用计算机访问照相机的 SD 内存卡时需要一个读卡器等。

在软件设计中也可能出现：需要开发的具有某种业务功能的组件在现有的组件库中已经存在，但它们与当前系统的接口规范不兼容.
如果重新开发这些组件成本又很高，这时用适配器模式能很好地解决这些问题。


适配器模式（Adapter）的定义如下：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。
适配器模式分为类结构型模式和对象结构型模式两种，前者类之间的耦合度比后者高，且要求程序员了解现有组件库中的相关组件的内部结构，所以应用相对较少些。

该模式的主要优点如下。
    **客户端通过适配器可以透明地调用目标接口。
    **复用了现存的类，程序员不需要修改原有代码而重用现有的适配者类。
    **将目标类和适配者类解耦，解决了目标类和适配者类接口不一致的问题。

其缺点是：对类适配器来说，更换适配器的实现过程比较复杂。

类适配器模式可采用多重继承方式实现，如 C++ 可定义一个适配器类来同时继承当前系统的业务接口和现有组件库中已经存在的组件接口；
Java 不支持多继承，但可以定义一个适配器类来实现当前系统的业务接口，同时又继承现有组件库中已经存在的组件。


对象适配器模式可釆用将现有组件库中已经实现的组件引入适配器类中，该类同时实现当前系统的业务接口。

适配器模式（Adapter）包含以下主要角色。
    **目标（Target）接口：当前系统业务所期待的接口，它可以是抽象类或接口。
    **适配者（Adaptee）类：它是被访问和适配的现存组件库中的组件接口。
    **适配器（Adapter）类：它是一个转换器，通过继承或引用适配者的对象，把适配者接口转换成目标接口，让客户按目标接口的格式访问适配者。


理解：适配器模式，与代理模式，在本质上是一样的，都是对最终访问对象进行封装，只是使用原因不一样。
    **代理是主动封装，被动调用，一般无明确的调用者。
        代理的接口功能，是我们在场景中主动想对外开放某些功能，而主动定义和封装，调用者只能根据这些接口进行调用。
    **适配器是被动封装，主动调用，一般有明确的调用者。
        适配器的接口功能，是根据调用者的需要而定义，但因不兼容才导致被迫重新封装，是调用者要什么，我们就得提供什么。


【例1】 MotorAdapterTest.java
用适配器模式（Adapter）模拟新能源汽车的发动机。
分析：新能源汽车的发动机有电能发动机（Electric Motor）和光能发动机（Optical Motor）等，各种发动机的驱动方法不同。
例如，电能发动机的驱动方法 electricDrive() 是用电能驱动，而光能发动机的驱动方法 opticalDrive() 是用光能驱动，它们是适配器模式中被访问的适配者。
客户端希望用统一的发动机驱动方法 drive() 访问这两种发动机，所以必须定义一个统一的目标接口 Motor，
然后再定义电能适配器（Electric Adapter）和光能适配器（Optical Adapter）去适配这两种发动机。
我们把客户端想访问的新能源发动机的适配器的名称放在 XML 配置文件中，客户端可以通过对象生成器类 ReadXML 去读取。
这样，客户端就可以通过 Motor 接口随便使用任意一种新能源发动机去驱动汽车。

适配器模式（Adapter）通常适用于以下场景。
    **以前开发的系统存在满足新系统功能需求的类，但其接口同新系统的接口不一致。
    **使用第三方提供的组件，但组件接口定义和自己要求的接口定义不同。

适配器模式（Adapter）可扩展为双向适配器模式，双向适配器类既可以把适配者接口转换成目标接口，也可以把目标接口转换成适配者接口。


