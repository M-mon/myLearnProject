在现实生活中，存在很多“部分-整体”的关系，例如，大学中的部门与学院、总公司中的部门与分公司、学习用品中的书与书包、生活用品中的衣月艮与衣柜以及厨房中的锅碗瓢盆等。
在软件开发中也是这样，例如，文件系统中的文件与文件夹、窗体程序中的简单控件与容器控件等。对这些简单对象与复合对象的处理，如果用组合模式来实现会很方便。

组合（Composite）模式的定义：有时又叫作部分-整体模式，它是一种将对象组合成树状的层次结构的模式，用来表示“部分-整体”的关系，使用户对单个对象和组合对象具有一致的访问性。

组合模式的主要优点有：
    **组合模式使得客户端代码可以一致地处理单个对象和组合对象，无须关心自己处理的是单个对象，还是组合对象，这简化了客户端代码；
    **更容易在组合体内加入新的对象，客户端不会因为加入了新的对象而更改源代码，满足“开闭原则”；

其主要缺点是：
    **设计较复杂，客户端需要花更多时间理清类之间的层次关系；
    **不容易限制容器中的构件；
    **不容易用继承的方法来增加构件的新功能；

组合模式包含以下主要角色。
    **抽象构件（Component）角色：它的主要作用是为树叶构件和树枝构件声明公共接口，并实现它们的默认行为。
        在透明式的组合模式中抽象构件还声明访问和管理子类的接口；在安全式的组合模式中不声明访问和管理子类的接口，管理工作由树枝构件完成。
    **树叶构件（Leaf）角色：是组合中的叶节点对象，它没有子节点，用于实现抽象构件角色中 声明的公共接口。
    **树枝构件（Composite）角色：是组合中的分支节点对象，它有子节点。
        它实现了抽象构件角色中声明的接口，它的主要作用是存储和管理子部件，通常包含 Add()、Remove()、GetChild() 等方法。
组合模式分为透明式的组合模式和安全式的组合模式。

(1) 透明方式：在该方式中，由于抽象构件声明了所有子类中的全部方法，所以客户端无须区别树叶对象和树枝对象，对客户端来说是透明的。
    但其缺点是：树叶构件本来没有 Add()、Remove() 及 GetChild() 方法，却要实现它们（空实现或抛异常），这样会带来一些安全性问题。

(2) 安全方式：在该方式中，将管理子构件的方法移到树枝构件中，抽象构件和树叶构件没有对子对象的管理方法，这样就避免了上一种方式的安全性问题。
    但由于叶子和分支有不同的接口，客户端在调用时要知道树叶对象和树枝对象的存在，所以失去了透明性。

例1】 ShoppingTest.java
用组合模式实现当用户在商店购物后，显示其所选商品信息，并计算所选商品总价的功能。

说明：假如李先生到韶关“天街e角”生活用品店购物，用 1 个红色小袋子装了 2 包婺源特产（单价 7.9 元）、1 张婺源地图（单价 9.9 元）；
用 1 个白色小袋子装了 2 包韶关香藉（单价 68 元）和 3 包韶关红茶（单价 180 元）；
用 1 个中袋子装了前面的红色小袋子和 1 个景德镇瓷器（单价 380 元）；
用 1 个大袋子装了前面的中袋子、白色小袋子和 1 双李宁牌运动鞋（单价 198 元）。

最后“大袋子”中的内容有：{1 双李宁牌运动鞋（单价 198 元）、
白色小袋子{2 包韶关香菇（单价 68 元）、3 包韶关红茶（单价 180 元）}、
中袋子{1 个景德镇瓷器（单价 380 元）、红色小袋子{2 包婺源特产（单价 7.9 元）、1 张婺源地图（单价 9.9 元）}
}，现在要求编程显示李先生放在大袋子中的所有商品信息并计算要支付的总价。

适用的以下应用场景。
    **在需要表示一个对象整体与部分的层次结构的场合。
    **要求对用户隐藏组合对象与单个对象的不同，用户可以用统一的接口使用组合结构中的所有对象的场合。

透明组合模式 将公共接口封装到抽象根节点（Component）中，那么系统所有节点就具备一致行为，所以如果当系统绝大多数层次具备相同的公共行为时，采用 透明组合模式 也许会更好
（代价：为剩下少数层次节点引入不需要的方法）；
而如果当系统各个层次差异性行为较多或者树节点层次相对稳定（健壮）时，采用 安全组合模式。


理解：
      “部分-整体”的关系，简单说，对象的成员也是一个相似对象，两者有共性，但是可包含关系，称为套娃或树节点模式可能更好理解。
      组合模式的设计，是要找到相似点和对象的嵌套关系。把相似点提取出来，模糊所有对象的差异，从而让我们对所有对象更好统一管理。
      简单说：组合模式的用处，就是对所有对象用统一的名称去管理。
      就像树型结构，对我们来说，根节点和叶子节点都是节点，只是其区别在于，根节点有后续节点，叶子节点无后续节点；
      也像是套娃，对我们来说，每一层都是套娃，但每一个套娃都可以有不同的形状外表和解开方式，甚至被包含的套娃不一定只有一个。
      运用组合模式，此时就是用“节点”、“套娃”这种统称去管理所有对象，差异化依旧存在，但此时更容易去利用每一个对象。



