原型模式包含以下主要角色。
    **抽象原型类：规定了具体原型对象必须实现的接口。
    **具体原型类：实现抽象原型类的 clone() 方法，它是可被复制的对象。
    **访问类：使用具体原型类中的 clone() 方法来复制新的对象。


原型模式的克隆分为浅克隆和深克隆。
Java 中的 Object 类提供了浅克隆的 clone() 方法，具体原型类只要实现 Cloneable 接口就可实现对象的浅克隆，这里的 Cloneable 接口就是抽象原型类。

例子：ProtoTypeWukong.java
用原型模式模拟“孙悟空”复制自己。
分析：孙悟空拔下猴毛轻轻一吹就变出很多孙悟空，这实际上是用到了原型模式。这里的孙悟空类 SunWukong 是具体原型类，而 Java 中的 Cloneable 接口是抽象原型类。


用原型模式除了可以生成相同的对象，还可以生成相似的对象

例子：ProtoTypeCitation.java
用原型模式生成“三好学生”奖状。
分析：同一学校的“三好学生”奖状除了获奖人姓名不同，其他都相同，属于相似对象的复制，同样可以用原型模式创建，然后再做简单修改就可以了。


原型模式通常适用于以下场景。
    **对象之间相同或相似，即只是个别的几个属性不同的时候。
    **对象的创建过程比较麻烦，但复制比较简单的时候。

原型模式可扩展为带原型管理器的原型模式。
它在原型模式的基础上增加了一个原型管理器 PrototypeManager 类。
该类用 HashMap 保存多个复制的原型，Client 类可以通过管理器的 get(String id) 方法从中获取复制的原型。

例子：ProtoTypeShape.java
用带原型管理器的原型模式来生成包含“圆”和“正方形”等图形的原型，并计算其面积。
分析：本实例中由于存在不同的图形类，例如，“圆”和“正方形”，它们计算面积的方法不一样，所以需要用一个原型管理器来管理它们。


